rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isWorker() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'worker';
    }
    
    function isFosterParent() {
      return isSignedIn() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'foster_parent';
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAssignedWorker(youthId) {
      return isSignedIn() && 
        isWorker() && 
        get(/databases/$(database)/documents/youth_profiles/$(youthId)).data.foster_worker == request.auth.uid;
    }
    
    function isAssignedFosterParent(youthId) {
      return isSignedIn() && 
        isFosterParent() && 
        get(/databases/$(database)/documents/youth_profiles/$(youthId)).data.fosterParentId == request.auth.uid;
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['email', 'role']) && 
        ['admin', 'worker', 'foster_parent'].hasAny(data.role);
    }
    
    function isValidYouthData(data) {
      return data.keys().hasAll(['first_name', 'last_name', 'dob']) && 
        data.first_name is string && 
        data.last_name is string && 
        data.dob is string;
    }
    
    function isValidMedicationLog(data) {
      return data.keys().hasAll(['youthId', 'medication', 'dosage', 'timestamp']) && 
        data.medication is string && 
        data.dosage is string && 
        data.timestamp is timestamp;
    }
    
    // Rate limiting function - limit writes to 100 per minute
    function notRateLimited() {
      return request.time > resource.data.lastWrite + duration.value(60, 's') || 
        resource.data.writeCount < 100;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read and update their own data
      // Admins can read and write all user data
      // Workers can read foster parent data
      allow read: if isOwner(userId) || isAdmin() || 
        (isWorker() && get(/databases/$(database)/documents/users/$(userId)).data.role == 'foster_parent');
      
      // For new user creation, we need to be more permissive
      // This allows a newly authenticated user to create their own document
      allow create: if (request.auth != null && request.auth.uid == userId && isValidUserData(request.resource.data)) || 
        (isAdmin() && isValidUserData(request.resource.data));
      
      allow update: if (isOwner(userId) && 
        request.resource.data.role == resource.data.role && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['displayName', 'phoneNumber', 'email', 'photoURL'])) || 
        (isAdmin() && isValidUserData(request.resource.data));
      
      allow delete: if isAdmin();
    }
    
    // Youth profiles
    match /youth_profiles/{youthId} {
      allow read: if isSignedIn() && (isAdmin() || isWorker() || 
        (isFosterParent() && resource.data.fosterParentId == request.auth.uid));
      
      allow create: if (isAdmin() || isWorker()) && isValidYouthData(request.resource.data);
      
      allow update: if (isAdmin() || isAssignedWorker(youthId)) && isValidYouthData(request.resource.data);
      
      allow delete: if isAdmin();
    }
    
    // Medication logs
    match /medication_logs/{logId} {
      allow read: if isSignedIn() && (isAdmin() || 
        (isWorker() && resource.data.foster_worker == request.auth.uid) || 
        (isFosterParent() && resource.data.fosterParentId == request.auth.uid));
      
      allow create: if isSignedIn() && 
        (isAdmin() || isWorker() || isFosterParent()) && 
        isValidMedicationLog(request.resource.data) && 
        (isFosterParent() ? request.resource.data.fosterParentId == request.auth.uid : true);
      
      allow update: if isSignedIn() && 
        (isAdmin() || 
        (isWorker() && resource.data.foster_worker == request.auth.uid) || 
        (isFosterParent() && resource.data.fosterParentId == request.auth.uid)) && 
        isValidMedicationLog(request.resource.data) && 
        notRateLimited();
      
      allow delete: if isAdmin();
    }
    
    // Reports
    match /reports/{reportId} {
      allow read: if isSignedIn() && (isAdmin() || isWorker());
      
      allow create: if isSignedIn() && (isAdmin() || isWorker()) && 
        request.resource.data.created_by == request.auth.uid;
      
      allow update: if isSignedIn() && (isAdmin() || 
        (isWorker() && resource.data.created_by == request.auth.uid));
      
      allow delete: if isAdmin();
    }
    
    // Theme settings
    match /themes/{userId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }
    
    // Agency settings
    match /agency_settings/{agencyId} {
      // All authenticated users can read agency settings
      // Only admins can write agency settings
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Activity logs - for audit trail
    match /activity_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if false; // Immutable logs
    }
  }
}